{"version":3,"sources":["webpack:///./src/pages/custom-fields.mdx"],"names":["title","_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ySAKO,IAAMA,EAAQ,gBACRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,oHACA,iBAAQ,CACN,GAAM,oDADR,oDAGA,mEACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,8FAKL,mHACA,iNAEA,mJACA,0DAAyC,0BAAYA,WAAW,KAAvB,iBAAzC,OAA0G,0BAAYA,WAAW,KAAvB,iBAA1G,4CAAgN,0BAAYA,WAAW,KAAvB,mCAAhN,8GACsF,0BAAYA,WAAW,KAAvB,iBADtF,2HAEkD,0BAAYA,WAAW,KAAvB,yBAFlD,qCAEyJ,0BAAYA,WAAW,KAAvB,uCACzJ,qBAAG,0BAAYA,WAAW,KAAvB,YAAH,iDAAyG,0BAAYA,WAAW,KAAvB,mBAAzG,uEACA,0CAAyB,0BAAYA,WAAW,KAAvB,wBAAzB,4FACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,onBAqBL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,keA2BTJ,EAAWK,gBAAiB","file":"component---src-pages-custom-fields-mdx-bfe49c1dac467fcaf0ac.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const title = 'Custom Fields';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  title,\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"custom-fields\"\n    }}>{`Custom Fields`}</h1>\n    <p>{`You can always add any new field to reforml and freely use the attributes of new components`}</p>\n    <h2 {...{\n      \"id\": \"example---integrate-the-popular-react-datepicker\"\n    }}>{`Example - integrate the popular react-datepicker`}</h2>\n    <p>{`First you need to install react datepicker`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i react-datepicker\nnpm i react-datepicker @types/react-datepicker # for TypeScript\n`}</code></pre>\n    <p>{`Then you need to handle how to display the label, helperText, value, onChange on your own.`}</p>\n    <p>{`To minimize redundancy of your code you may instead make a higher order component that wraps each of\nyour custom FieldComponent to display the label and helperText in the same format.`}</p>\n    <p>{`Notice that react-datepicker uses selected to accept value, so we need to specifically assign value to its selected props.`}</p>\n    <p>{`Since input components may accept `}<inlineCode parentName=\"p\">{`value => void`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`event => void`}</inlineCode>{` as onChange handler, reforml provides a `}<inlineCode parentName=\"p\">{`generalizeOptionalValueCallback`}</inlineCode>{` helper function,\nthat help you to convert onChange props supplied to your component, which is a nullable `}<inlineCode parentName=\"p\">{`value => void`}</inlineCode>{` function, into whatever handler that the input component accepts.\nIf the component gives the value, it will just call `}<inlineCode parentName=\"p\">{`props.onChange(value)`}</inlineCode>{`; if it is an event, it will call `}<inlineCode parentName=\"p\">{`props.onChange(event.target.value)`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`...props`}</inlineCode>{` basically passes rest of the settings to the `}<inlineCode parentName=\"p\">{`ReactDatePicker`}</inlineCode>{`, so you can enjoy the different props that the datepicker provides`}</p>\n    <p>{`(TypeScript only) `}<inlineCode parentName=\"p\">{`FieldComponent<Date>`}</inlineCode>{` defines that this component handles value with type Date, as react-timepicker required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react'\nimport ReactDatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport { FieldComponent, generalizeOptionalValueCallback } from 'reforml'\n\nconst DatePicker: FieldComponent<Date> = ({label, value, helperText, onChange, ...props}) => {\n  return (\n    <div>\n      <div className='label'>{label}</div>\n      <ReactDatePicker selected={value} onChange={generalizeOptionalValueCallback(onChange)} {...props}/>\n      <div>\n        <small className='form-text text-muted'>{helperText}</small>\n      </div>\n    </div>\n  )\n}\n\nexport default DatePicker\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: date\n    label: my field\n    helperText: help\n    defaultVal: \\${Date.now()}\n    showTimeSelect: true\n  \\`), [])\n  return (\n    <ReformlProvider fieldComponents={{ date: DatePicker }}>\n      <BaseForm fields={fields} onChange={setValue} value={value}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </ReformlProvider>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}