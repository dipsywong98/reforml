{"version":3,"sources":["webpack:///./src/pages/provided-fields/number.mdx"],"names":["title","_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0SAKO,IAAMA,EAAQ,2BACRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,UADR,UAGA,yFACA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,yOASL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,gYAsBL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,u4BA0CTJ,EAAWK,gBAAiB","file":"component---src-pages-provided-fields-number-mdx-a317af502c58304b71f9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const title = 'number - Provided Fields';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  title,\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"number\"\n    }}>{`Number`}</h1>\n    <p>{`Input that accepts only number, and cast to number automatically`}</p>\n    <h2 {...{\n      \"id\": \"schema\"\n    }}>{`Schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`<fieldName in value>:\n  type: number\n  label: string? # fieldName to display\n  defaultVal: number? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: number\n    label: my field\n    helperText: help\n    defaultVal: 123\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-your-own\"\n    }}>{`Use Your own`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { FieldComponent, FieldPropTypes, ReformlProvider, BaseForm } from 'reforml'\nimport React, { FunctionComponent, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst MyNumber: FieldComponent<string> = ({\n  helperText,\n  onChange,\n  value,\n  label,\n  defaultVal,\n  ...props\n}) => {\n  return (\n    <div>\n      <div>{label}: <input {...props} onChange={onChange} value={value}/></div>\n      <div>{helperText}</div>\n    </div>\n  )\n}\n\nMyNumber.propTypes = {\n  ...FieldPropTypes,\n  value: PropTypes.string\n}\n\nconst TextPage: FunctionComponent = () => {\n  const [value, setValue] = useState({})\n  return (\n    <ReformlProvider fieldComponents={{ text: MyNumber }}>\n      <BaseForm fields={{ myField: { type: 'number', label: 'label', helperText: 'helper' } }} onChange={setValue} value={value}/>\n    </ReformlProvider>\n  )\n}\n\nexport default TextPage\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}