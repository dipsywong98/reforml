(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{sxpV:function(e,t,n){"use strict";n.r(t),n.d(t,"title",(function(){return a})),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return u}));n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("5hJT"),n("mXGw");var l=n("/FXl");var a="list - Provided Fields",i={},s={title:a,_frontmatter:i};function u(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(l.b)("wrapper",Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"list"},"List"),Object(l.b)("p",null,"Field that can manage list of value"),Object(l.b)("h2",{id:"schema"},"Schema"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-yml"}),"<fieldName in value>:\n  type: checkbox_group\n  label: string? # fieldName to display\n  defaultVal: any? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n\n  of?: string | Field<any> # subfield definition to be used for the list\n  inlineDelete?: boolean # whether the delete button is inline with each subfield\n  deletable?: boolean    # user can delete from the list, default true\n  editable?: boolean     # user can edit existing item in the list, default true\n  creatable?: boolean    # user can add new item to the list, default true\n  defaultNewVal?: any    # default value in new item input\n  placeholder?: string   # placeholder for new item input\n")),Object(l.b)("h2",{id:"example---list-of-text"},"Example - list of text"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: list\n    of: text\n    label: my field\n    helperText: help\n    inlineDelete: true\n    defaultNewVal: ''\n    placeholder: New\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-provided-fields-list-mdx-285490b20f30579d68df.js.map