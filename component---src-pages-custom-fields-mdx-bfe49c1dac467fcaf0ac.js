(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{D79d:function(e,t,n){"use strict";n.r(t),n.d(t,"title",(function(){return l})),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return i}));n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("5hJT"),n("mXGw");var a=n("/FXl");var l="Custom Fields",o={},r={title:l,_frontmatter:o};function i(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,["components"]);return Object(a.b)("wrapper",Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"custom-fields"},"Custom Fields"),Object(a.b)("p",null,"You can always add any new field to reforml and freely use the attributes of new components"),Object(a.b)("h2",{id:"example---integrate-the-popular-react-datepicker"},"Example - integrate the popular react-datepicker"),Object(a.b)("p",null,"First you need to install react datepicker"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-sh"}),"npm i react-datepicker\nnpm i react-datepicker @types/react-datepicker # for TypeScript\n")),Object(a.b)("p",null,"Then you need to handle how to display the label, helperText, value, onChange on your own."),Object(a.b)("p",null,"To minimize redundancy of your code you may instead make a higher order component that wraps each of\nyour custom FieldComponent to display the label and helperText in the same format."),Object(a.b)("p",null,"Notice that react-datepicker uses selected to accept value, so we need to specifically assign value to its selected props."),Object(a.b)("p",null,"Since input components may accept ",Object(a.b)("inlineCode",{parentName:"p"},"value => void")," or ",Object(a.b)("inlineCode",{parentName:"p"},"event => void")," as onChange handler, reforml provides a ",Object(a.b)("inlineCode",{parentName:"p"},"generalizeOptionalValueCallback")," helper function,\nthat help you to convert onChange props supplied to your component, which is a nullable ",Object(a.b)("inlineCode",{parentName:"p"},"value => void")," function, into whatever handler that the input component accepts.\nIf the component gives the value, it will just call ",Object(a.b)("inlineCode",{parentName:"p"},"props.onChange(value)"),"; if it is an event, it will call ",Object(a.b)("inlineCode",{parentName:"p"},"props.onChange(event.target.value)")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"...props")," basically passes rest of the settings to the ",Object(a.b)("inlineCode",{parentName:"p"},"ReactDatePicker"),", so you can enjoy the different props that the datepicker provides"),Object(a.b)("p",null,"(TypeScript only) ",Object(a.b)("inlineCode",{parentName:"p"},"FieldComponent<Date>")," defines that this component handles value with type Date, as react-timepicker required."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"import React from 'react'\nimport ReactDatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport { FieldComponent, generalizeOptionalValueCallback } from 'reforml'\n\nconst DatePicker: FieldComponent<Date> = ({label, value, helperText, onChange, ...props}) => {\n  return (\n    <div>\n      <div className='label'>{label}</div>\n      <ReactDatePicker selected={value} onChange={generalizeOptionalValueCallback(onChange)} {...props}/>\n      <div>\n        <small className='form-text text-muted'>{helperText}</small>\n      </div>\n    </div>\n  )\n}\n\nexport default DatePicker\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: date\n    label: my field\n    helperText: help\n    defaultVal: ${Date.now()}\n    showTimeSelect: true\n  `), [])\n  return (\n    <ReformlProvider fieldComponents={{ date: DatePicker }}>\n      <BaseForm fields={fields} onChange={setValue} value={value}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </ReformlProvider>\n  )\n}\n")))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-custom-fields-mdx-bfe49c1dac467fcaf0ac.js.map