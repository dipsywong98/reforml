{"version":3,"sources":["webpack:///./src/pages/validation.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oQAKO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,cADR,cAGA,wDAAuC,+BAAGC,WAAW,KAAQ,CACzD,KAAQ,uFAD2B,oBAAvC,mHAIA,iBAAQ,CACN,GAAM,oBADR,oBAGA,gDAA+B,+BAAGA,WAAW,KAAQ,CACjD,KAAQ,uFADmB,oBAA/B,wFAG0B,0BAAYA,WAAW,KAAvB,YAH1B,OAGsF,0BAAYA,WAAW,KAAvB,YAHtF,2EAIA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,uwBAqCL,iBAAQ,CACN,GAAM,qBADR,qBAGA,2XAIA,kSAIA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,65BAsCL,iGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,ysBAkCL,iBAAQ,CACN,GAAM,2BADR,4BAGA,+HACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sBAIL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8XAmBL,iBAAQ,CACN,GAAM,+BADR,+BAGA,2EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sGAIL,0JACA,4EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4RAeTJ,EAAWK,gBAAiB","file":"component---src-pages-validation-mdx-3a55584de25cdbcb291f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"validation\"\n    }}>{`Validation`}</h1>\n    <p>{`Reforml provides way to utilize `}<a parentName=\"p\" {...{\n        \"href\": \"//wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\"\n      }}>{`HTML constraints`}</a>{` and any custom validators including validators from other libraries.\nYou can also customize the error message`}</p>\n    <h2 {...{\n      \"id\": \"html-constraints\"\n    }}>{`HTML Constraints`}</h2>\n    <p>{`You can directly supply `}<a parentName=\"p\" {...{\n        \"href\": \"//wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\"\n      }}>{`HTML constraints`}</a>{` in field definition, if you are using controlled form,\nyou need to manually called `}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler since HTML constraints are only validated in uncontrolled form`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const [hasError, setHasError] = useState(false)\n  const handleChange = (newValue, {validate}) => {\n    const error = validate()\n    setHasError(!!error)\n    setValue(newValue)\n  }\n  const fields = useMemo(() => jsyaml.load(\\`\n  myText:\n    type: text\n    label: Input some value\n    helperText: a required field with minLength\n    required: true\n    minLength: 6\n  myNumber:\n    type: number\n    label: Number\n    required: true\n    min: 0\n    max: 10\n    step: 2\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n      <p>{hasError ? 'ERROR' : 'OK'}</p>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-validation\"\n    }}>{`Custom Validation`}</h2>\n    <p>{`By supplying a validatorDictionary to ReformlProvider,\nBasicForm inside it can use yaml with field containing a validation property.\nThe validation property is a list of \"validation rule name\" or \"rule name to params array map\" or \"rule name to single param\"\nYou can notice the mapping of params in YAML definition to validator function implementation`}</p>\n    <p>{`validatorDictionary is a rule name to validator map,\na validator is a function that accept first parameter as the field value,\nrest parameter from field validation settings from the yaml,\nand return a boolean to determine whether the value passes the validation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const [hasError, setHasError] = useState(false)\n  const handleChange = (newValue, {validate}) => {\n    const error = validate()\n    setHasError(!!error)\n    setValue(newValue)\n  }\n  const fields = useMemo(() => jsyaml.load(\\`\n  myText:\n    type: text\n    label: Must be Foo\n    required: true\n    validate:\n      - isFoo\n      - isEqual: Foo\n      - isLengthBetween:\n        - 2\n        - 4\n  \\`), [])\n  return (\n    <ReformlProvider validatorDictionary={{\n    isFoo: (value) => value === 'Foo',\n    isEqual: (value, compare) => value === compare,\n    isLengthBetween: (value, a, b) => value.length >= a && value.length <= b\n    }}>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n      <p>{hasError ? 'ERROR' : 'OK'}</p>\n    </ReformlProvider>\n  )\n}\n`}</code></pre>\n    <p>{`In field definition you can even implement a validator function directly`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const [hasError, setHasError] = useState(false)\n  const handleChange = (newValue, {validate}) => {\n    const error = validate()\n    setHasError(!!error)\n    setValue(newValue)\n  }\n  const fields = useMemo(() => {\n  const fields = jsyaml.load(\\`\n  myText:\n    type: text\n    label: Must be Foo\n    required: true\n  \\`)\n  fields.myText.validate = [{\n    isFoo: (value) => value === 'Foo'\n  }]\n  return fields\n  }, [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n      <p>{hasError ? 'ERROR' : 'OK'}</p>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validatorjs-integration\"\n    }}>{`validator.js integration`}</h2>\n    <p>{`The Validators used in reforml shares the same interface as validator.js, so you can use them directly`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i validator\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import validators from 'validator'\n\nconst myValidators = {\n  isFoo: (value) => value === 'Foo',\n  isEqual: (value, compare) => value === compare,\n  isLengthBetween: (value, a, b) => value.length >= a && value.length <= b\n}\n\n() => {\nreturn <ReformlProvider validatorDictionary={{\n  ...validators,\n  ...myValidators\n  }}>\n    {/* BaseForm here */}\n  </Reforml>\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"customize-the-error-message\"\n    }}>{`Customize the error message`}</h2>\n    <p>{`ValidateErrorFormatter has the following signature`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export type ValidateErrorFormatter = <T>(value: T, ruleName: string, params: never[]) => string\n`}</code></pre>\n    <p>{`value is the value supplied in the form, ruleName is the name of validation, params is the array of param supply to the validator`}</p>\n    <p>{`and you can supply the formatter to ReformlProvider`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const validateErrorFormatter = (_, ruleName, params) => {\n  return ruleName + (params.length === 0 ? '' : ':' + params.join(','))\n}\n() => {\n  return <ReformlProvider validateErrorFormatter={validateErrorFormatter}>\n      {/* BaseForm here */}\n    </ReformlProvider>\n  }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}