{"version":3,"sources":["webpack:///./src/pages/reduce-fields.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sQAKO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,2RAEA,iBAAQ,CACN,GAAM,gDADR,gDAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,2vBAqCTJ,EAAWK,gBAAiB","file":"component---src-pages-reduce-fields-mdx-9838701188b6643e7f0d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"reduce-fields\"\n    }}>{`Reduce Fields`}</h1>\n    <p>{`When the form value changed, you can alter the fields accordingly using the reduceFields function that comes along with the parameters in the onChangeHandler of form,\nwhere reduceField is a function that accepts a closure that map old fields into new fields`}</p>\n    <h2 {...{\n      \"id\": \"example---copy-the-text-field-value-to-label\"\n    }}>{`Example - copy the text field value to label`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const handleChange = (newValue, {reduceFields}) => {\n    reduceFields((oldFields) => {\n      if(newValue.copyField.length) {\n        oldFields.copyField.label = newValue.copyField\n      } else {\n        oldFields.copyField.label = 'Input some value'\n      }\n      return oldFields\n    })\n    setValue(newValue)\n  }\n  const fields = useMemo(() => jsyaml.load(\\`\n  copyField:\n    type: text\n    label: Input some value\n    helperText: this will copy the value to label\n    placeholder: label value\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}