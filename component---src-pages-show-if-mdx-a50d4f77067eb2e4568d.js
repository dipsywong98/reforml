(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{NAJa:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return r}));t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("5hJT"),t("mXGw");var a=t("/FXl");var l={},s={_frontmatter:l};function r(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,l={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,["components"]);return Object(a.b)("wrapper",Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"show-if"},"Show If"),Object(a.b)("p",null,"Reforml provides way to decide whether to show a field depending on value of other field"),Object(a.b)("h2",{id:"depend-on-boolean-field"},"Depend on boolean field"),Object(a.b)("p",null,"You can directly supply a field name of boolean field. If that boolean field is true, this field will show."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const handleChange = (newValue) => {\n    setValue(newValue)\n  }\n  const fields = useMemo(() => jsyaml.load(`\n  showHidden:\n    type: checkbox\n    label: show hidden field\n    defaultVal: true\n  myText:\n    type: text\n    label: Input some value\n    showIf: showHidden\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")),Object(a.b)("h2",{id:"depend-on-any-field"},"Depend on any field"),Object(a.b)("p",null,"You can directly supply a field name to comparison map to determine whether this field should show.\nYou may use . to denote value inside a nest field, for example if form value is ",Object(a.b)("inlineCode",{parentName:"p"},"{foo: {bar: 1}}")," you can use ",Object(a.b)("inlineCode",{parentName:"p"},"{'foo.bar': {$eq: 1}"),".\nHere are the list of supported operators:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"key"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"$eq"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"equal")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"$neq"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"not equal")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"$gt"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"greater than")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"$gte"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"greater than or equal")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"$lte"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"less than or equal")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"$lt"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"less than")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"$in"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"is member of array")))),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const handleChange = (newValue) => {\n    setValue(newValue)\n  }\n  const fields = useMemo(() => jsyaml.load(`\n  showHiddenIfShow:\n    type: text\n    label: type show to show the hidden field\n    defaultVal: show\n  myText:\n    type: text\n    label: show when showHiddenIfShow is show\n    showIf:\n      showHiddenIfShow:\n        $eq: show\n  myText2:\n    type: text\n    label: Shown when matches any of show's\n    showIf:\n      showHiddenIfShow:\n        $in:\n          - show\n          - Show\n          - sHoW\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-show-if-mdx-a50d4f77067eb2e4568d.js.map