{"version":3,"sources":["webpack:///./src/pages/getting-started.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mQAKO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,iBAAQ,CACN,GAAM,WADR,WAGA,+DACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,oBAIL,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uHAKL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,iWAoBL,iBAAQ,CACN,GAAM,gCADR,gCAGA,8DAA6C,0BAAYA,WAAW,KAAvB,WAA7C,6BACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oBAIL,iCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+KAML,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,+aAqBL,iBAAQ,CACN,GAAM,2BADR,2BAGA,+DAA8C,0BAAYA,WAAW,KAAvB,mBAC9C,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8BAIL,gDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gHAUL,8GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uDAIL,gCAAe,0BAAYA,WAAW,KAAvB,gBAAf,gBAAwF,0BAAYA,WAAW,KAAvB,iCAAxF,OAAyK,0BAAYA,WAAW,KAAvB,sCAAzK,KACA,kDAAiC,0BAAYA,WAAW,KAAvB,wBACjC,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+NAWL,iEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4CAIL,oFAAmE,0BAAYA,WAAW,KAAvB,0BACnE,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oIAaTJ,EAAWK,gBAAiB","file":"component---src-pages-getting-started-mdx-a4a82b3802cc2a05395c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <p>{`First install the core reforml library`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i reforml\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-reforml-in-json-form\"\n    }}>{`Use Reforml in JSON Form`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {BaseForm} from 'reforml'  // simplest form element\nimport 'reforml/dist/index.css'   // default styling\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: text\n    label: my first reforml field\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-reforml-with-yaml-string\"\n    }}>{`Use Reforml with YAML string`}</h2>\n    <p>{`Just install some YAML parser such as `}<inlineCode parentName=\"p\">{`js-yaml`}</inlineCode>{`. You can install that by`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i js-yaml\n`}</code></pre>\n    <p>{`and then`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  import {BaseForm} from 'reforml'  // simplest form element\n  import 'reforml/dist/index.css'   // default styling\n  import jsyaml from 'js-yaml'      // yaml parser\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: text\n    label: my second reforml field\n    helperText: Use the react hook \"useMemo\" so it only parse the yaml once\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-yaml-webpack-loader\"\n    }}>{`Use YAML Webpack loader`}</h2>\n    <p>{`Install a yaml webpack loader, such as `}<inlineCode parentName=\"p\">{`js-yaml-loader`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i -D js-yaml-loader\n`}</code></pre>\n    <p>{`In your webpack config,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// webpack.config.js\nmodule: {\n  rules: [{\n    test: /\\\\.ya?ml$/,\n    use: 'js-yaml-loader',\n  }]\n}\n`}</code></pre>\n    <p>{`Or if you are using Create React App that the webpack config is encapsulated, you can`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i -D react-app-rewired react-app-rewire-yaml\n`}</code></pre>\n    <p>{`then in `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`, change the `}<inlineCode parentName=\"p\">{`\"start\": \"react-script start\"`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`\"start\": \"react-app-rewired start\"`}</inlineCode>{`.`}</p>\n    <p>{`At root create a new file `}<inlineCode parentName=\"p\">{`config-overrides.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const rewireYAML = require('react-app-rewire-yaml');\nmodule.exports = function override(config, env) {\n  if (!config.plugins) {\n    config.plugins = [];\n  }\n  config = rewireYAML(config, env)\n  return config\n}\n`}</code></pre>\n    <p>{`Then you can simply import the yaml file`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import fields from './my-fields.yaml'\n`}</code></pre>\n    <p>{`If you are using TypeScript you may need a declaration file `}<inlineCode parentName=\"p\">{`./my-fields.yaml.d.ts`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Fields } from 'reforml'\n\ndeclare module '**/*.reforml.yaml' {\n  const fields: Fields\n  export default fields\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}