{"version":3,"sources":["webpack:///./src/pages/provided-fields/checkbox-group.mdx"],"names":["title","_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2SAKO,IAAMA,EAAQ,mCACRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,4CACA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,skBAgBL,iBAAQ,CACN,GAAM,qDADR,qDAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,+bAuBL,iBAAQ,CACN,GAAM,2BADR,2BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,4dAyBL,iBAAQ,CACN,GAAM,2DADR,2DAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,gmBAgCL,iBAAQ,CACN,GAAM,gBADR,gBAGA,4BAAW,0BAAYA,WAAW,KAAvB,kDAAX,4CACA,4BAAW,0BAAYA,WAAW,KAAvB,sFAAX,6IACA,4BAAW,0BAAYA,WAAW,KAAvB,+EAAX,gIACF,0BAAYA,WAAW,KAAvB,SADE,SACyD,0BAAYA,WAAW,KAAvB,OADzD,6CACsJ,0BAAYA,WAAW,KAAvB,kBADtJ,oDACqQ,0BAAYA,WAAW,KAAvB,SADrQ,WACkU,0BAAYA,WAAW,KAAvB,SADlU,0CAEkC,0BAAYA,WAAW,KAAvB,kBAFlC,+EAGyB,0BAAYA,WAAW,KAAvB,kBAHzB,oDAIA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8lDAoETJ,EAAWK,gBAAiB","file":"component---src-pages-provided-fields-checkbox-group-mdx-ddf48b23ab78e6fc998f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const title = 'checkbox_group - Provided Fields';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  title,\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"checkbox-group\"\n    }}>{`Checkbox Group`}</h1>\n    <p>{`A multiselect field`}</p>\n    <h2 {...{\n      \"id\": \"schema\"\n    }}>{`Schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`<fieldName in value>:\n  type: checkbox_group\n  label: string? # fieldName to display\n  defaultVal: any? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n  options: Options # options can be a list of value, label to value map, or list of any object\n  # the path or key name to get option value inside an option object\n  valueKey: DigKey?\n  # the path or key name to get label to display inside an option object\n  labelKey: DigKey?\n\n  output: MultiSelectOutput # it can be array' or 'object'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---by-default-checkbox_group-outputs-array\"\n    }}>{`Example - by default checkbox_group outputs array`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: checkbox_group\n    label: my field\n    helperText: help\n    options: ['option1','option2', 'option3']\n    defaultVal: ['option2']\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---return-object\"\n    }}>{`Example - return object`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: checkbox_group\n    label: my field\n    helperText: help\n    options: ['option1','option2', 'option3']\n    defaultVal:\n      option2: true\n    output: object\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---specify-additional-properties-for-each-option\"\n    }}>{`Example - specify additional properties for each option`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: checkbox_group\n    label: my field\n    helperText: help\n    options:\n      - value: value1\n        label: label1\n        helperText: helper1\n      - value2\n      - value: value3\n        label: label3\n        helperText: helper3\n    defaultVal:\n      value2: true\n    output: object\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-your-own\"\n    }}>{`Use Your own`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`const Checkbox = useFieldComponents().checkbox`}</inlineCode>{` hook to retrieve the checkbox component`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`const valueLabel = useProcessOptionsMemo<unknown>(options, { labelKey, valueKey })`}</inlineCode>{` hook to process the options definition into array of value label pair (see `}{`[select page]`}{`('./fields/select#Use Your own') for more)`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`const [flags, setFlag] = useProcessMultiSelectMemo(onChange, value, output)`}</inlineCode>{` hook to process the output definition and field value and onChange props into flags set and setFlag higher order function.\n`}<inlineCode parentName=\"p\">{`flags`}</inlineCode>{` is a `}<inlineCode parentName=\"p\">{`Set`}</inlineCode>{` that holds all the selected value, where `}<inlineCode parentName=\"p\">{`setFlag(value)`}</inlineCode>{` returns a function that toggle the existence of `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` in set `}<inlineCode parentName=\"p\">{`flags`}</inlineCode>{`,\nthat is, if value was not in flags, `}<inlineCode parentName=\"p\">{`setFlag(value)`}</inlineCode>{` is a function that will insert value to flags;\nif value was not in flags, `}<inlineCode parentName=\"p\">{`setFlag(value)`}</inlineCode>{` is a function that will remove value from flags`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {\n  Fields,\n  FieldPropTypes,\n  ReformlProvider,\n  BaseForm,\n  MultiSelectFieldComponent,\n  MultiSelectValue,\n  useFieldComponents, useProcessMultiSelectMemo,\n  useProcessOptionsMemo\n} from 'reforml'\nimport React, { FunctionComponent, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport 'reforml/dist/index.css'\n\nconst MyCheckboxGroup: MultiSelectFieldComponent<MultiSelectValue<unknown>> = ({\n  helperText,\n  onChange,\n  value,\n  label,\n  options,\n  valueKey,\n  labelKey,\n  output\n}) => {\n  const Checkbox = useFieldComponents().checkbox\n  const valueLabel = useProcessOptionsMemo<unknown>(options, { labelKey, valueKey })\n  const [flags, setFlag] = useProcessMultiSelectMemo(onChange, value, output)\n  return (\n    <div>\n      <div>{label}</div>\n      <div>{helperText}</div>\n      {valueLabel.map(({ value, label, ...otherProps }) => (\n        <Checkbox key={label} {...otherProps} label={label} value={flags.has(value)} onChange={setFlag(value)}/>\n      ))}\n    </div>\n  )\n}\n\nMyCheckboxGroup.propTypes = {\n  ...FieldPropTypes,\n  value: PropTypes.any\n}\n\nconst TextPage: FunctionComponent = () => {\n  const [value, setValue] = useState({})\n  const fields: Fields = {\n    myField: {\n      type: 'checkbox_group',\n      label: 'some label',\n      helperText: 'some helper',\n      options: ['option1', 'option2', 'option3']\n    }\n  }\n  return (\n    <ReformlProvider fieldComponents={{ checkbox_group: MyCheckboxGroup }}>\n      <BaseForm fields={fields} onChange={setValue} value={value}/>\n    </ReformlProvider>\n  )\n}\n\nexport default TextPage\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}