(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{Q84q:function(e,n,t){"use strict";t.r(n),t.d(n,"title",(function(){return a})),t.d(n,"_frontmatter",(function(){return r})),t.d(n,"default",(function(){return u}));t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("5hJT"),t("mXGw");var l=t("/FXl");var a="number - Provided Fields",r={},o={title:a,_frontmatter:r};function u(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(l.b)("wrapper",Object.assign({},o,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"number"},"Number"),Object(l.b)("p",null,"Input that accepts only number, and cast to number automatically"),Object(l.b)("h2",{id:"schema"},"Schema"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-yml"}),"<fieldName in value>:\n  type: number\n  label: string? # fieldName to display\n  defaultVal: number? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n")),Object(l.b)("h2",{id:"example"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: number\n    label: my field\n    helperText: help\n    defaultVal: 123\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")),Object(l.b)("h2",{id:"use-your-own"},"Use Your own"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"import { FieldComponent, FieldPropTypes, ReformlProvider, BaseForm } from 'reforml'\nimport React, { FunctionComponent, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst MyNumber: FieldComponent<string> = ({\n  helperText,\n  onChange,\n  value,\n  label,\n  defaultVal,\n  ...props\n}) => {\n  return (\n    <div>\n      <div>{label}: <input {...props} onChange={onChange} value={value}/></div>\n      <div>{helperText}</div>\n    </div>\n  )\n}\n\nMyNumber.propTypes = {\n  ...FieldPropTypes,\n  value: PropTypes.string\n}\n\nconst TextPage: FunctionComponent = () => {\n  const [value, setValue] = useState({})\n  return (\n    <ReformlProvider fieldComponents={{ text: MyNumber }}>\n      <BaseForm fields={{ myField: { type: 'number', label: 'label', helperText: 'helper' } }} onChange={setValue} value={value}/>\n    </ReformlProvider>\n  )\n}\n\nexport default TextPage\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-provided-fields-number-mdx-945eb02a786b203aded0.js.map