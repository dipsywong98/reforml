{"version":3,"sources":["webpack:///./src/pages/show-if.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oQAKO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,iHACA,iBAAQ,CACN,GAAM,2BADR,2BAGA,oIACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,khBA4BL,iBAAQ,CACN,GAAM,uBADR,uBAGA,6MAC8E,0BAAYA,WAAW,KAAvB,mBAD9E,gBAC0J,0BAAYA,WAAW,KAAvB,wBAD1J,gDAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,0BAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,uBAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,yBAMN,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,4wBA2CTJ,EAAWK,gBAAiB","file":"component---src-pages-show-if-mdx-8dc0899ae1ff0c74f8fa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"show-if\"\n    }}>{`Show If`}</h1>\n    <p>{`Reforml provides way to decide whether to show a field depending on value of other field`}</p>\n    <h2 {...{\n      \"id\": \"depend-on-boolean-field\"\n    }}>{`Depend on boolean field`}</h2>\n    <p>{`You can directly supply a field name of boolean field. If that boolean field is true, this field will show.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const handleChange = (newValue) => {\n    setValue(newValue)\n  }\n  const fields = useMemo(() => jsyaml.load(\\`\n  showHidden:\n    type: checkbox\n    label: show hidden field\n    defaultVal: true\n  myText:\n    type: text\n    label: Input some value\n    showIf: showHidden\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"depend-on-any-field\"\n    }}>{`Depend on any field`}</h2>\n    <p>{`You can directly supply a field name to comparison map to determine whether this field should show.\nYou may use . to denote value inside a nest field, for example if form value is `}<inlineCode parentName=\"p\">{`{foo: {bar: 1}}`}</inlineCode>{` you can use `}<inlineCode parentName=\"p\">{`{'foo.bar': {$eq: 1}`}</inlineCode>{`.\nHere are the list of supported operators:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$eq`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`equal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$neq`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`not equal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$gt`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`greater than`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$gte`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`greater than or equal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$lte`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`less than or equal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$lt`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`less than`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$in`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is member of array`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const handleChange = (newValue) => {\n    setValue(newValue)\n  }\n  const fields = useMemo(() => jsyaml.load(\\`\n  showHiddenIfShow:\n    type: text\n    label: type show to show the hidden field\n    defaultVal: show\n  myText:\n    type: text\n    label: show when showHiddenIfShow is show\n    showIf:\n      showHiddenIfShow:\n        $eq: show\n  myText2:\n    type: text\n    label: Shown when matches any of show's\n    showIf:\n      showHiddenIfShow:\n        $in:\n          - show\n          - Show\n          - sHoW\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={handleChange}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}