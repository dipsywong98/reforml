{"version":3,"sources":["webpack:///./src/pages/provided-fields/checkbox.mdx"],"names":["title","_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2SAKO,IAAMA,EAAQ,6BACRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,YADR,YAGA,6DACA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,kWAWL,iBAAQ,CACN,GAAM,qCADR,qCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,6WAqBL,iBAAQ,CACN,GAAM,qCADR,qCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,wcAwBL,iBAAQ,CACN,GAAM,gBADR,gBAGA,4BAAW,0BAAYA,WAAW,KAAvB,2FAAX,sGAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qLAaL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kpDAiFTJ,EAAWK,gBAAiB","file":"component---src-pages-provided-fields-checkbox-mdx-13151a46e3da73d59ba1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const title = 'checkbox - Provided Fields';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  title,\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`Field that can give true false value`}</p>\n    <h2 {...{\n      \"id\": \"schema\"\n    }}>{`Schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`<fieldName in value>:\n  type: checkbox\n  label: string? # fieldName to display\n  defaultVal: any? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n  trueValue: any? # custom true value, default boolean true\n  falseValue: any? # custom false value , default undefined\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---simplest-boolean-output\"\n    }}>{`Example - simplest boolean output`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: checkbox\n    label: my field\n    helperText: help\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---custom-true-false-value\"\n    }}>{`Example - custom true false value`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: checkbox\n    label: my field\n    helperText: help\n    defaultVal: this is false\n    trueValue: this is true\n    falseValue: this is false\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-your-own\"\n    }}>{`Use Your own`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`const [flag, handleChange] = useProcessBool(value, onChange, { trueValue, falseValue })`}</inlineCode>{` hook to process the values, onChange\nand supply the resultant flag and handler to your input tag`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// input\nuseProcessOptionsMemo({label1: 'value1', label2: 'value2'})\n// will give\n[{\n  value: 'value1',\n  label: 'label1'\n},{\n  value: 'value2',\n  label: 'label2'\n}]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {\n  Fields,\n  FieldPropTypes,\n  ReformlProvider,\n  BaseForm,\n  useProcessBool,\n  BoolFieldComponent\n} from 'reforml'\nimport React, { FunctionComponent, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst MyCheckbox: BoolFieldComponent<unknown> = ({\n  helperText,\n  onChange,\n  value,\n  label,\n  defaultVal,\n  trueValue,\n  falseValue,\n  ...props\n}) => {\n  const [flag, handleChange] = useProcessBool(value, onChange, { trueValue, falseValue })\n  return (\n    <div>\n      <label>\n        <div style={{ display: 'flex' }}>\n          <div>\n            <input\n              className='form-check-input'\n              type='checkbox'\n              onChange={handleChange}\n              checked={flag}\n              {...props}\n            />\n          </div>\n          <div>\n            <div>\n              {label}\n            </div>\n            <div>\n              {(helperText !== undefined ? <div>{helperText}</div> : null)}\n            </div>\n          </div>\n        </div>\n      </label>\n    </div>\n  )\n}\n\nMyCheckbox.propTypes = {\n  ...FieldPropTypes,\n  value: PropTypes.string\n}\n\nconst TextPage: FunctionComponent = () => {\n  const [value, setValue] = useState({})\n  console.log(value)\n  const fields: Fields = {\n    myField: {\n      type: 'checkbox',\n      label: 'some label',\n      helperText: 'some helper',\n      trueValue: 'some true',\n      falseValue: 'some false'\n    }\n  }\n  return (\n    <ReformlProvider fieldComponents={{ checkbox: MyCheckbox }}>\n      <BaseForm fields={fields} onChange={setValue} value={value}/>\n    </ReformlProvider>\n  )\n}\n\nexport default TextPage\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}