{"version":3,"sources":["webpack:///./src/pages/provided-fields/select.mdx"],"names":["title","_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4SAKO,IAAMA,EAAQ,2BACRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,UADR,UAGA,+IACA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,ggBAcL,iBAAQ,CACN,GAAM,2BADR,2BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,ycA0BL,iBAAQ,CACN,GAAM,gCADR,gCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,2dA0BL,iBAAQ,CACN,GAAM,4BADR,4BAGA,+CAA8B,0BAAYA,WAAW,KAAvB,YAA9B,OAA0F,0BAAYA,WAAW,KAAvB,YAA1F,0CAAyL,0BAAYA,WAAW,KAAvB,SAAzL,WAAsP,0BAAYA,WAAW,KAAvB,SAAtP,qJAEA,iBAAQ,CACN,GAAM,8CADR,8CAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,miBA6BL,iBAAQ,CACN,GAAM,8DADR,8DAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,YACd,KAAQ,SAHP,+oBAoCL,iBAAQ,CACN,GAAM,gBADR,gBAGA,4BAAW,0BAAYA,WAAW,KAAvB,mEAAX,sEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qLAaL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8qDA2ETJ,EAAWK,gBAAiB","file":"component---src-pages-provided-fields-select-mdx-86e2dd7434d27445f7d9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const title = 'select - Provided Fields';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  title,\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"select\"\n    }}>{`Select`}</h1>\n    <p>{`Select one value from list of options, where options can be a list of value, label to value map, or list of any object`}</p>\n    <h2 {...{\n      \"id\": \"schema\"\n    }}>{`Schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`<fieldName in value>:\n  type: select\n  label: string? # fieldName to display\n  defaultVal: any? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n  options: Options # options can be a list of value, label to value map, or list of any object\n  # the path or key name to get option value inside an option object\n  valueKey: DigKey?\n  # the path or key name to get label to display inside an option object\n  labelKey: DigKey?\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---list-of-value\"\n    }}>{`Example - list of value`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: select\n    label: my field\n    helperText: help\n    placeholder: Please select\n    options:\n      - value1\n      - value2\n      - value3\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---label-to-value-map\"\n    }}>{`Example - label to value map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: select\n    label: my field\n    helperText: help\n    placeholder: Please select\n    options:\n      label1: value1\n      label2: value2\n      label3: value3\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example---list-of-object\"\n    }}>{`Example - list of object`}</h2>\n    <p>{`If you did not specify `}<inlineCode parentName=\"p\">{`valueKey`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`labelKey`}</inlineCode>{`, reforml will first try to search for `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` key or `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` key in the option.\nIf reforml cannot find the specific value, it will just use the object as the value, while stringify the object as the label`}</p>\n    <h3 {...{\n      \"id\": \"specify-a-value-and-a-label-in-each-option\"\n    }}>{`Specify a value and a label in each option`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: select\n    label: my field\n    helperText: help\n    placeholder: Please select\n    options:\n      - value: value1\n        label: label1\n      - value: value2\n        label: label2\n      - value: value3\n        label: label3\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"specify-valuekey-and-labelkey-to-search-inside-each-option\"\n    }}>{`Specify valueKey and labelKey to search inside each option`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(\\`\n  myField:\n    type: select\n    label: my field\n    helperText: help\n    placeholder: Please select\n    options:\n      - key1: value1\n        key2:\n          key3: label1\n      - key1: value2\n        key2:\n          key3: label2\n      - key1: value3\n        key2:\n          key3: label3\n    valueKey: key1\n    labelKey:\n      - key2\n      - key3\n  \\`), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-your-own\"\n    }}>{`Use Your own`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`useProcessOptionsMemo<unknown>(options, { labelKey, valueKey })`}</inlineCode>{` hook to process the options into array of value label pairs, e.g.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// input\nuseProcessOptionsMemo({label1: 'value1', label2: 'value2'})\n// will give\n[{\n  value: 'value1',\n  label: 'label1'\n},{\n  value: 'value2',\n  label: 'label2'\n}]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {\n  Fields,\n  OptionsFieldComponent,\n  FieldPropTypes,\n  ReformlProvider,\n  BaseForm,\n  useProcessOptionsMemo\n} from 'reforml'\nimport React, { FunctionComponent, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst MySelect: OptionsFieldComponent<unknown> = ({\n  helperText,\n  onChange,\n  value,\n  label,\n  defaultVal,\n  options,\n  labelKey,\n  valueKey,\n  ...props\n}) => {\n  const valueLabel = useProcessOptionsMemo<unknown>(options, { labelKey, valueKey })\n  const handleChange = ({ target: { value } }: { target: { value: string } }): void => {\n    onChange?.(valueLabel[Number.parseInt(value)]?.value)\n  }\n  return (\n    <div>\n      <div>{label}:\n        <select className='form-control' onChange={handleChange} {...props}>\n          <option value=\"\" selected={value === undefined}>{props.placeholder}</option>\n          {valueLabel.map(({ label }, index) => (\n            <option key={label} value={index} selected={value === valueLabel[index].value}>{label}</option>\n          ))}\n        </select>\n      </div>\n      <div>{helperText}</div>\n    </div>\n  )\n}\n\nMySelect.propTypes = {\n  ...FieldPropTypes,\n  value: PropTypes.string\n}\n\nconst TextPage: FunctionComponent = () => {\n  const [value, setValue] = useState({})\n  console.log(value)\n  const fields: Fields = {\n    myField: {\n      type: 'select',\n      options: [{\n        key1: 'value1',\n        key2: {\n          key3: 'label1'\n        }\n      }]\n    }\n  }\n  return (\n    <ReformlProvider fieldComponents={{ select: MySelect }}>\n      <BaseForm fields={fields} onChange={setValue} value={value}/>\n    </ReformlProvider>\n  )\n}\n\nexport default TextPage\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}