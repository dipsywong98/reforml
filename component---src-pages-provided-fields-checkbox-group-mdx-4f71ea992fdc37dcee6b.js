(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{fE2l:function(e,n,t){"use strict";t.r(n),t.d(n,"title",(function(){return o})),t.d(n,"_frontmatter",(function(){return a})),t.d(n,"default",(function(){return i}));t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("5hJT"),t("mXGw");var l=t("/FXl");var o="checkbox_group - Provided Fields",a={},s={title:o,_frontmatter:a};function i(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,l,o={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(l.b)("wrapper",Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"checkbox-group"},"Checkbox Group"),Object(l.b)("p",null,"A multiselect field"),Object(l.b)("h2",{id:"schema"},"Schema"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-yml"}),"<fieldName in value>:\n  type: checkbox_group\n  label: string? # fieldName to display\n  defaultVal: any? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n  options: Options # options can be a list of value, label to value map, or list of any object\n  # the path or key name to get option value inside an option object\n  valueKey: DigKey?\n  # the path or key name to get label to display inside an option object\n  labelKey: DigKey?\n\n  output: MultiSelectOutput # it can be array' or 'object'\n")),Object(l.b)("h2",{id:"example---by-default-checkbox_group-outputs-array"},"Example - by default checkbox_group outputs array"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: checkbox_group\n    label: my field\n    helperText: help\n    options: ['option1','option2', 'option3']\n    defaultVal: ['option2']\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")),Object(l.b)("h2",{id:"example---return-object"},"Example - return object"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: checkbox_group\n    label: my field\n    helperText: help\n    options: ['option1','option2', 'option3']\n    defaultVal:\n      option2: true\n    output: object\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")),Object(l.b)("h2",{id:"example---specify-additional-properties-for-each-option"},"Example - specify additional properties for each option"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: checkbox_group\n    label: my field\n    helperText: help\n    options:\n      - value: value1\n        label: label1\n        helperText: helper1\n      - value2\n      - value: value3\n        label: label3\n        helperText: helper3\n    defaultVal:\n      value2: true\n    output: object\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")),Object(l.b)("h2",{id:"use-your-own"},"Use Your own"),Object(l.b)("p",null,"Use ",Object(l.b)("inlineCode",{parentName:"p"},"const Checkbox = useFieldComponents().checkbox")," hook to retrieve the checkbox component"),Object(l.b)("p",null,"Use ",Object(l.b)("inlineCode",{parentName:"p"},"const valueLabel = useProcessOptionsMemo<unknown>(options, { labelKey, valueKey })")," hook to process the options definition into array of value label pair (see ","[select page]","('./fields/select#Use Your own') for more)"),Object(l.b)("p",null,"Use ",Object(l.b)("inlineCode",{parentName:"p"},"const [flags, setFlag] = useProcessMultiSelectMemo(onChange, value, output)")," hook to process the output definition and field value and onChange props into flags set and setFlag higher order function.\n",Object(l.b)("inlineCode",{parentName:"p"},"flags")," is a ",Object(l.b)("inlineCode",{parentName:"p"},"Set")," that holds all the selected value, where ",Object(l.b)("inlineCode",{parentName:"p"},"setFlag(value)")," returns a function that toggle the existence of ",Object(l.b)("inlineCode",{parentName:"p"},"value")," in set ",Object(l.b)("inlineCode",{parentName:"p"},"flags"),",\nthat is, if value was not in flags, ",Object(l.b)("inlineCode",{parentName:"p"},"setFlag(value)")," is a function that will insert value to flags;\nif value was not in flags, ",Object(l.b)("inlineCode",{parentName:"p"},"setFlag(value)")," is a function that will remove value from flags"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"import {\n  Fields,\n  FieldPropTypes,\n  ReformlProvider,\n  BaseForm,\n  MultiSelectFieldComponent,\n  MultiSelectValue,\n  useFieldComponents, useProcessMultiSelectMemo,\n  useProcessOptionsMemo\n} from 'reforml'\nimport React, { FunctionComponent, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport 'reforml/dist/index.css'\n\nconst MyCheckboxGroup: MultiSelectFieldComponent<MultiSelectValue<unknown>> = ({\n  helperText,\n  onChange,\n  value,\n  label,\n  options,\n  valueKey,\n  labelKey,\n  output\n}) => {\n  const Checkbox = useFieldComponents().checkbox\n  const valueLabel = useProcessOptionsMemo<unknown>(options, { labelKey, valueKey })\n  const [flags, setFlag] = useProcessMultiSelectMemo(onChange, value, output)\n  return (\n    <div>\n      <div>{label}</div>\n      <div>{helperText}</div>\n      {valueLabel.map(({ value, label, ...otherProps }) => (\n        <Checkbox key={label} {...otherProps} label={label} value={flags.has(value)} onChange={setFlag(value)}/>\n      ))}\n    </div>\n  )\n}\n\nMyCheckboxGroup.propTypes = {\n  ...FieldPropTypes,\n  value: PropTypes.any\n}\n\nconst TextPage: FunctionComponent = () => {\n  const [value, setValue] = useState({})\n  const fields: Fields = {\n    myField: {\n      type: 'checkbox_group',\n      label: 'some label',\n      helperText: 'some helper',\n      options: ['option1', 'option2', 'option3']\n    }\n  }\n  return (\n    <ReformlProvider fieldComponents={{ checkbox_group: MyCheckboxGroup }}>\n      <BaseForm fields={fields} onChange={setValue} value={value}/>\n    </ReformlProvider>\n  )\n}\n\nexport default TextPage\n")))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-provided-fields-checkbox-group-mdx-4f71ea992fdc37dcee6b.js.map