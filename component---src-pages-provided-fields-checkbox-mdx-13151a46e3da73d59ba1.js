(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"O+hN":function(e,n,l){"use strict";l.r(n),l.d(n,"title",(function(){return t})),l.d(n,"_frontmatter",(function(){return s})),l.d(n,"default",(function(){return u}));l("W1QL"),l("K/PF"),l("t91x"),l("75LO"),l("5hJT"),l("mXGw");var a=l("/FXl");var t="checkbox - Provided Fields",s={},o={title:t,_frontmatter:s};function u(e){var n=e.components,l=function(e,n){if(null==e)return{};var l,a,t={},s=Object.keys(e);for(a=0;a<s.length;a++)l=s[a],n.indexOf(l)>=0||(t[l]=e[l]);return t}(e,["components"]);return Object(a.b)("wrapper",Object.assign({},o,l,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"checkbox"},"Checkbox"),Object(a.b)("p",null,"Field that can give true false value"),Object(a.b)("h2",{id:"schema"},"Schema"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-yml"}),"<fieldName in value>:\n  type: checkbox\n  label: string? # fieldName to display\n  defaultVal: any? # default value\n  helperText: string? # text to help user to input\n  disabled: boolean? # disable the input, default false\n  trueValue: any? # custom true value, default boolean true\n  falseValue: any? # custom false value , default undefined\n")),Object(a.b)("h2",{id:"example---simplest-boolean-output"},"Example - simplest boolean output"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: checkbox\n    label: my field\n    helperText: help\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")),Object(a.b)("h2",{id:"example---custom-true-false-value"},"Example - custom true false value"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"() => {\n  const [value, setValue] = useState({})\n  const fields = useMemo(() => jsyaml.load(`\n  myField:\n    type: checkbox\n    label: my field\n    helperText: help\n    defaultVal: this is false\n    trueValue: this is true\n    falseValue: this is false\n  `), [])\n  return (\n    <div>\n      <BaseForm fields={fields} value={value} onChange={setValue}/>\n      value:\n      <pre>{JSON.stringify(value, null, 2)}</pre>\n    </div>\n  )\n}\n")),Object(a.b)("h2",{id:"use-your-own"},"Use Your own"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"const [flag, handleChange] = useProcessBool(value, onChange, { trueValue, falseValue })")," hook to process the values, onChange\nand supply the resultant flag and handler to your input tag"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"// input\nuseProcessOptionsMemo({label1: 'value1', label2: 'value2'})\n// will give\n[{\n  value: 'value1',\n  label: 'label1'\n},{\n  value: 'value2',\n  label: 'label2'\n}]\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"import {\n  Fields,\n  FieldPropTypes,\n  ReformlProvider,\n  BaseForm,\n  useProcessBool,\n  BoolFieldComponent\n} from 'reforml'\nimport React, { FunctionComponent, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst MyCheckbox: BoolFieldComponent<unknown> = ({\n  helperText,\n  onChange,\n  value,\n  label,\n  defaultVal,\n  trueValue,\n  falseValue,\n  ...props\n}) => {\n  const [flag, handleChange] = useProcessBool(value, onChange, { trueValue, falseValue })\n  return (\n    <div>\n      <label>\n        <div style={{ display: 'flex' }}>\n          <div>\n            <input\n              className='form-check-input'\n              type='checkbox'\n              onChange={handleChange}\n              checked={flag}\n              {...props}\n            />\n          </div>\n          <div>\n            <div>\n              {label}\n            </div>\n            <div>\n              {(helperText !== undefined ? <div>{helperText}</div> : null)}\n            </div>\n          </div>\n        </div>\n      </label>\n    </div>\n  )\n}\n\nMyCheckbox.propTypes = {\n  ...FieldPropTypes,\n  value: PropTypes.string\n}\n\nconst TextPage: FunctionComponent = () => {\n  const [value, setValue] = useState({})\n  console.log(value)\n  const fields: Fields = {\n    myField: {\n      type: 'checkbox',\n      label: 'some label',\n      helperText: 'some helper',\n      trueValue: 'some true',\n      falseValue: 'some false'\n    }\n  }\n  return (\n    <ReformlProvider fieldComponents={{ checkbox: MyCheckbox }}>\n      <BaseForm fields={fields} onChange={setValue} value={value}/>\n    </ReformlProvider>\n  )\n}\n\nexport default TextPage\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-provided-fields-checkbox-mdx-13151a46e3da73d59ba1.js.map